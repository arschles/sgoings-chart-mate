#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below.

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
#
#/ command: chart-mate:test: "run e2e tests for deis"
#/ usage: rerun chart-mate:test [options]

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh test || {
  echo >&2 "Failed loading function library." ; exit 1 ;
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status.

trap 'rerun_die $? "*** command failed: chart-mate:test. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -eo pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables:

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting
# one the corresponding option variables.

rerun_options_parse "$@"

load-config

trap exit-trap EXIT

mkdir -p ~/.helm/cache/deis/deis-tests
if [ ! -z $CI ]; then
  echo "INJECTING VERSIONS!"
  echo "-------------------"
  bumpver-if-set "deis-tests" "deis-e2e" "${WORKFLOW_E2E_SHA}"
  echo "-------------------"
  rsync -av deis-tests/ ${HOME}/.helm/cache/deis/deis-tests > /dev/null
else
  helm repo add deis https://github.com/deis/charts.git || true
fi

helm fetch deis/deis-tests
helm uninstall -n deis -y deis-tests; helm install deis-tests

wait-for-pod "deis-tests"

# keep trying to access logs until the pod actually exits
# as there's a timeout on kubectl logs -f that we
# sometimes run into
iterations=0
while ! return-pod-exit-code "deis-tests" &> /dev/null; do
  log-info "Reloading kubectl logs (#${iterations})"

  kubectl --namespace=deis logs -f deis-tests || true

  let iterations+=1
done

echo "---------------------------------------------"
return-pod-exit-code "deis-tests"
